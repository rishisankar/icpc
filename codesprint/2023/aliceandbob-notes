10^18 bits total, differ by 200k
420 guesses
1) are bits in a range equal (lie w p=1/13)
2) specific bits

ur run on 250 cases and the goal is to pass 248 of them

part 1: no lies
- need to find first differing bit: binary search
    req queries: 60 (log2(1e18))
- check differingbit

instead: 7 guesses per query (can do better with q2 for small ranges)
- p(failure in single query): 0.0010133944679521275
- expected # of queries per thing: 7
- probability of success in approach: 0.9409789608291955
- probability of success over 250 cases: 2.483 * 10e-7

ideally want probability of success around 0.9999 to do well in 250 cases

idea: guess until kx the same in a row (seems kinda dumb but wtv)
  3x:
    p(failure in single query): 0.00152
    expected # of queries per thing: 3.5261
  4x:
    p(failure in single query): 0.00015
    expected # of queries per thing: 4.90566
  5x:
    p(failure in single query): 0.0000168
    expected # of queries per thing: 6.3980075
    probability of success in approach: 0.9989924994025778
    probability of success over 250 cases: 0.7772430927801413
    probability of success in at least 248 cases: 0.9978142600707068

heuristic (stop at 10):
  pfail: 4.36e-05
  exp: 6.1340254
  stdev: 1.8311259902461217


  6x:
    p(failure in single query): basically 0
    expected # of queries per thing: 8.01 rip
    

untested:
idea: only guess 4x for a query. if inconsistent, guess more than 7 times
idea: can we overlap ranges?



new version: 

P(lie) = 1/13
  P(success) = 599984/600000
  P(>= 248 / 250) = 0.999999951448696
  P(ac in 20 cases) = 0.9999990289743683

228974 / 229000
P(lie) = 1/12
  P(success) = 278965 / 279000
  P(>= 248 / 250) = 0.9999854858753311
  P(ac in 20 cases) = 0.9997097575285013


  single bit 0: 31000/31000
  single bit n-1: 20000/20000


P(lie) = 1/11
  P(success) = 9988 / 10000 (too low)