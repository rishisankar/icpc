(v, bitset<N>(i).to_string()): {1, 2, 3, 4} 0000
(v, bitset<N>(i).to_string()): {1, 2, 4, 3} 0000
(v, bitset<N>(i).to_string()): {1, 3, 2, 4} 0000
(v, bitset<N>(i).to_string()): {1, 3, 4, 2} 0010
(v, bitset<N>(i).to_string()): {1, 4, 2, 3} 0000
(v, bitset<N>(i).to_string()): {1, 4, 3, 2} 0000
(v, bitset<N>(i).to_string()): {2, 1, 3, 4} 0000
(v, bitset<N>(i).to_string()): {2, 1, 4, 3} 0000
(v, bitset<N>(i).to_string()): {2, 3, 1, 4} 0001
(v, "fail"): {2, 3, 4, 1} fail

2 3 4 1 c1 c2 c3 c4
4 3 fail

(v, bitset<N>(i).to_string()): {2, 4, 1, 3} 0001
(v, bitset<N>(i).to_string()): {2, 4, 3, 1} 0001
(v, bitset<N>(i).to_string()): {3, 1, 2, 4} 0000
(v, bitset<N>(i).to_string()): {3, 1, 4, 2} 0001
(v, bitset<N>(i).to_string()): {3, 2, 1, 4} 0000
(v, bitset<N>(i).to_string()): {3, 2, 4, 1} 0011

3 2 4 1 c1 c2 c3 c4

  2
4 3

2 has to be placed on 3 since its the only one that came before it
1 can be placed on either stack. greedily pick the one that is later (4)

(v, bitset<N>(i).to_string()): {3, 4, 1, 2} 0001
(v, bitset<N>(i).to_string()): {3, 4, 2, 1} 0001
(v, bitset<N>(i).to_string()): {4, 1, 2, 3} 0000
(v, bitset<N>(i).to_string()): {4, 1, 3, 2} 0000
(v, bitset<N>(i).to_string()): {4, 2, 1, 3} 0000
(v, bitset<N>(i).to_string()): {4, 2, 3, 1} 0010
(v, bitset<N>(i).to_string()): {4, 3, 1, 2} 0000
(v, bitset<N>(i).to_string()): {4, 3, 2, 1} 0000



(v, bitset<6>(i).to_string()): {4, 5, 2, 1, 3, 6} 000001
4 5 2 1 c1 c2 3 c3 c4 c5 6 c6

(v, "fail"): {4, 5, 2, 1, 6, 3} fail
4 5 2 1 c1 c2 6 3 c3 c4 c5 c6

(v, bitset<6>(i).to_string()): {4, 5, 2, 3, 1, 6} 000101
4 5 2 3 1 c1 c2 c3 c4 c5 6 c6



RMQ approach learnings

{7, 2, 4, 1, 6, 3, 8, 5}


7 2 4 1 c1 c2 6 3 c3 c4 8 5 c5 c6 c7 c8

Start by putting a 7

focusing on the range between 7, c7: (first thing pushed)
- if everything is less than 7, the state is equivalent to empty stack ==> can put 2 on either, doesn't matter
- if anything is larger than 7, first thing larger must go on other stack; nothing prior uncleared may go on other stack

=> by using this logic for each range
7.8 must be diff
2,4 must be diff
4,6 must be diff
6,8 must be diff
does anything else matter? maybe not
  - for remainder stuff, either do same greedy; or just pick arbitrarily

first larger <=> largest rmq (just test soln at the end to verify when u use rmq instead)

if you pick arbitrarily, approach is easy:
- for each node, join all adjacent
- for each node, assert that in different thing than 



DSU approach learning:

{2, 5, 1, 7, 4, 6, 3}
2 5 1 c1 c2 7 4 6 3 c3 c4 c5 c6 c7

constraints:
2-5 5-7 (5-6) 4-6
or
2-5 5-6 4-6

1: 2 7  6
2: 5    4

==> we need all constraints, then correctness is good. however, how to get all constraints without O(n^2)?
- note that we want constraints in spanning tree form