(v, bitset<N>(i).to_string()): {1, 2, 3, 4} 0000
(v, bitset<N>(i).to_string()): {1, 2, 4, 3} 0000
(v, bitset<N>(i).to_string()): {1, 3, 2, 4} 0000
(v, bitset<N>(i).to_string()): {1, 3, 4, 2} 0010
(v, bitset<N>(i).to_string()): {1, 4, 2, 3} 0000
(v, bitset<N>(i).to_string()): {1, 4, 3, 2} 0000
(v, bitset<N>(i).to_string()): {2, 1, 3, 4} 0000
(v, bitset<N>(i).to_string()): {2, 1, 4, 3} 0000
(v, bitset<N>(i).to_string()): {2, 3, 1, 4} 0001
(v, "fail"): {2, 3, 4, 1} fail

2 3 4 1 c1 c2 c3 c4
4 3 fail

(v, bitset<N>(i).to_string()): {2, 4, 1, 3} 0001
(v, bitset<N>(i).to_string()): {2, 4, 3, 1} 0001
(v, bitset<N>(i).to_string()): {3, 1, 2, 4} 0000
(v, bitset<N>(i).to_string()): {3, 1, 4, 2} 0001
(v, bitset<N>(i).to_string()): {3, 2, 1, 4} 0000
(v, bitset<N>(i).to_string()): {3, 2, 4, 1} 0011

3 2 4 1 c1 c2 c3 c4

  2
4 3

2 has to be placed on 3 since its the only one that came before it
1 can be placed on either stack. greedily pick the one that is later (4)

(v, bitset<N>(i).to_string()): {3, 4, 1, 2} 0001
(v, bitset<N>(i).to_string()): {3, 4, 2, 1} 0001
(v, bitset<N>(i).to_string()): {4, 1, 2, 3} 0000
(v, bitset<N>(i).to_string()): {4, 1, 3, 2} 0000
(v, bitset<N>(i).to_string()): {4, 2, 1, 3} 0000
(v, bitset<N>(i).to_string()): {4, 2, 3, 1} 0010
(v, bitset<N>(i).to_string()): {4, 3, 1, 2} 0000
(v, bitset<N>(i).to_string()): {4, 3, 2, 1} 0000



(v, bitset<6>(i).to_string()): {4, 5, 2, 1, 3, 6} 000001
4 5 2 1 c1 c2 3 c3 c4 c5 6 c6

(v, "fail"): {4, 5, 2, 1, 6, 3} fail
4 5 2 1 c1 c2 6 3 c3 c4 c5 c6

(v, bitset<6>(i).to_string()): {4, 5, 2, 3, 1, 6} 000101
4 5 2 3 1 c1 c2 c3 c4 c5 6 c6